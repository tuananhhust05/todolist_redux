{"version":3,"sources":["components/Todo/index.js","redux/action.js","redux/selector.js","components/TodoList/index.js","components/Filters/index.js","App.js","components/Filters/FiltersSlice.js","components/TodoList/TodosSlice.js","redux/reducer.js","redux/store.js","index.js"],"names":["priorityColorMapping","High","Medium","Low","Todo","name","prioriry","completed","id","dispatch","useDispatch","useState","checked","setChecked","justify","style","marginBottom","opacity","textDecoration","onChange","type","payload","color","margin","todosRemainingSelector","createSelector","state","todoList","filters","status","search","prioriries","searchText","filter","todo","length","includes","TodoList","todoName","setTodoName","setPrioriry","useSelector","height","span","overflowY","map","Group","display","compact","value","e","target","defaultValue","Option","label","onClick","uuidv4","Search","Input","Filters","setSearchText","filterStatus","setFilterStatus","filterPriorities","setFilterPriorities","Paragraph","fontWeight","marginTop","placeholder","sm","mode","allowClear","width","Title","Typography","App","flexDirection","backgroundColor","padding","boxShadow","borderRadius","textAlign","initState","filtersReducer","action","todoListReducer","rootReducer","combineReducers","composedEnhancers","composeWithDevTools","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2db52607.chunk.js","sourcesContent":["import { Row, Tag, Checkbox } from 'antd';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux'  // khi user click vào thì cập nhật dữ liệu lên global state\r\nimport { toggleTodoStatus } from '../../redux/action';\r\nconst priorityColorMapping = {\r\n  High: 'red',\r\n  Medium: 'blue',\r\n  Low: 'gray',\r\n};\r\n\r\nexport default function Todo({ name, prioriry, completed, id }) { //truyền dữ liệu ở ngoài component todoList \r\n  const dispatch = useDispatch();\r\n  const [checked, setChecked] = useState(completed);// set check theo giá trị của completed \r\n  // Bấm vào thì tạo ra 1 action gửi đến reducer, reducer cập nhật lên global; UI todoList gọi dữ liệu xuống, \r\n  //thằng input component hiển thị dựa theo thông tin \r\n  const toggleCheckbox = () => {\r\n    setChecked(!checked);\r\n    dispatch(toggleTodoStatus(id));\r\n  };\r\n\r\n  return (\r\n    \r\n    <Row\r\n      justify='space-between'\r\n      style={{\r\n        marginBottom: 3,\r\n        ...(checked ? { opacity: 0.5, textDecoration: 'line-through' } : {}),\r\n      }} \r\n    > {/*config thuộc tính css dựa theo thằng checked*/}\r\n    {/*Lắng nghe sự kiện*/}\r\n      <Checkbox checked={checked} onChange={toggleCheckbox}>\r\n        {name}\r\n      </Checkbox>\r\n      <Tag color={priorityColorMapping[prioriry]} style={{ margin: 0 }}>\r\n        {prioriry}\r\n      </Tag>\r\n    </Row>\r\n  );\r\n}\r\n","// function create action \r\nexport const addTodo = (data) => {\r\n    return {\r\n      type: 'todoList/addTodo',\r\n      payload: data,\r\n    };\r\n  };\r\n\r\n  // craetor action; linh hoạt tạo ra dữ liệu dựa vào sự thay đổi của id \r\n  //action để chỉnh sửa global state về todo.completed \r\n  export const toggleTodoStatus = (todoId) => {  \r\n    return {\r\n      type: 'todoList/toggleTodoStatus',\r\n      payload: todoId,\r\n    };\r\n  };\r\n  \r\n  export const searchFilterChange = (text) => {\r\n    return {\r\n      type: 'filters/searchFilterChange',\r\n      payload: text,\r\n    };\r\n  };\r\n  \r\n  export const statusFilterChange = (status) => {\r\n    return {\r\n      type: 'filters/statusFilterChange',\r\n      payload: status,\r\n    };\r\n  };\r\n  \r\n  export const priorityFilterChange = (prioriries) => {\r\n    return {\r\n      type: 'filters/prioritiesFilterChange',\r\n      payload: prioriries,\r\n    };\r\n  };","import {createSelector} from 'reselect'\r\n// selector để lấy dữ liệu từ state chung \r\n\r\nexport const todoListSelector =(state) => state.todoList \r\n// thì truyênd tham số này vào \r\n//state ở đây là state chung \r\n\r\n// lấy thông tin từ filter.\r\nexport const searchTextSelector = (state) => state.filters.search;\r\nexport const filterStatusSelector = (state) => state.filters.status;\r\nexport const filterPrioritiesSelector = (state) => state.filters.prioriries;\r\n\r\n\r\n// tạo ra 1 selector để tìm kiếm dữ liệu trong thằng todoListSelector dựa vào các điều kiện lấy từ global state \r\nexport const todosRemainingSelector = createSelector(\r\n    todoListSelector,\r\n    filterStatusSelector,\r\n    searchTextSelector,\r\n    filterPrioritiesSelector,\r\n    (todoList, status, searchText, prioriries) => {  // sắp xếp tuần tự theo  thứ tự các selector\r\n      return todoList.filter((todo) => {\r\n        if (status === 'All') {   // nếu là all thì đối tượng todo không cần phải có điều kiện của status \r\n          \r\n          return prioriries.length  // nếu prioriries ===1 ( đây là giá logic chỉ cần độ dài khác 0 là được) \r\n            ? todo.name.includes(searchText) && prioriries.includes(todo.prioriry) // todo.name cần chứa thằng searchtext còn thằng prioriry \r\n                                                                                   //cần chứa thằng todo.prioriry thuộc mảng prioriries\r\n            : todo.name.includes(searchText);\r\n        }\r\n  \r\n        return (\r\n          todo.name.includes(searchText) &&  // name bao gôm searchText và \r\n          //<= Đây chính là phần xử lý logic để tìm ra điều kiện cho thằng todo ( todo.completed) thằng todo này phải có giá trị todo.completed bằng true hoặc false \r\n          (status === 'Completed' ? todo.completed : !todo.completed) &&  // (và status bằng completed thì todo.completdted == true còn nếu không thì bằng false)\r\n          (prioriries.length ? prioriries.includes(todo.prioriry) : true)\r\n        );\r\n      });\r\n    }\r\n  );","import { Col, Row, Input, Button, Select, Tag } from 'antd';\r\nimport Todo from '../Todo';\r\nimport {useDispatch,useSelector} from 'react-redux' // import dispatch để sử dụng \r\nimport {addTodo} from '../../redux/action' // import addTodo => Create -action\r\nimport {v4 as uuidv4} from 'uuid' // thư viện để tạo id \r\nimport{todosRemainingSelector} from '../../redux/selector' // lấy hàm lấy dữ liêu từ kho chung \r\nimport {useState} from 'react'  // import useState phải để trong các ngoặc\r\n\r\nexport default function TodoList() {\r\n\r\n  // state của thằng tên công việc\r\n  const [todoName,setTodoName]=useState('');\r\n  //state của mức độ quan trọng priority \r\n  const[prioriry,setPrioriry]=useState('Medium')\r\n  \r\n  //lấy ra dữ liệu todolist  từ state chung sau khi được lọc bởi các dữ liệu search \r\n  const todoList =useSelector(todosRemainingSelector);\r\n  \r\n\r\n  // cài đặt phím up dữ liệu \r\n  // click vào bắn ra 1 action; thông tin  action có thể tùy biến dựa vào nội dung đầu vào , hàm được viết sẵn \r\n  const dispatch = useDispatch();// lôi thằng dispatch ra \r\n  const handleAddButtonClick = () => {\r\n    dispatch(\r\n      addTodo({\r\n        id: uuidv4(),\r\n        name: todoName,\r\n        prioriry: prioriry,\r\n        completed: false,\r\n      })\r\n    );\r\n    setTodoName('');\r\n    setPrioriry('Medium');  // set dữ liệu về mặc định\r\n  };\r\n  \r\n  // cập nhật state dựa vào thẻ input \r\n  const handleInputChange =(e)=>{\r\n    setTodoName(e.target.value) // e là đối tượng xảy ra sự kiện thay đổi \r\n  }\r\n\r\n  // câp nhật priority \r\n  const handlePriorityChange=(value)=>{\r\n    setPrioriry(value);\r\n  }\r\n  \r\n  return (\r\n    <Row style={{ height: 'calc(100% - 40px)' }}>\r\n      <Col span={24} style={{ height: 'calc(100% - 40px)', overflowY: 'auto' }}>\r\n         {/*Cách truyền prop, bên todoComponent nhận ra các thông tin truyền vào thông qua tên prop*/}\r\n        {todoList.map(todo=> \r\n           \r\n            <Todo \r\n               key={todo.id} \r\n               id={todo.id}\r\n               name={todo.name} \r\n               prioriry={todo.prioriry} \r\n               completed={todo.completed}/>)}\r\n      </Col>\r\n      <Col span={24}>\r\n        <Input.Group style={{ display: 'flex' }} compact> {/*Thẻ input để chọn việc cần làm hiện tại*/}\r\n          <Input value={todoName} onChange={handleInputChange}/>       {/*Thẻ input để nhập dữ liệu*/}\r\n        \r\n          <Select defaultValue=\"Medium\" value={prioriry} onChange={handlePriorityChange}>  {/*Thẻ select để lựa chọn độ quan trọng thẻ này để mặc định default */}\r\n            <Select.Option value='High' label='High'>{/*Các sự lựa chon*/}\r\n              <Tag color='red'>High</Tag>\r\n            </Select.Option>\r\n            <Select.Option value='Medium' label='Medium'>\r\n              <Tag color='blue'>Medium</Tag>\r\n            </Select.Option>\r\n            <Select.Option value='Low' label='Low'>\r\n              <Tag color='gray'>Low</Tag>\r\n            </Select.Option>\r\n          </Select>\r\n          <Button onClick={handleAddButtonClick}type='primary'>  {/*Cài dispatch ở đây viết 1 eventHandle*/}\r\n            Add\r\n          </Button>\r\n        </Input.Group>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { Col, Row, Input, Typography, Radio, Select, Tag } from 'antd'\r\nimport { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n// redux action \r\nimport { priorityFilterChange, searchFilterChange, statusFilterChange } from '../../redux/action'\r\nconst { Search } = Input;\r\n\r\nexport default function Filters() {\r\n  const dispatch = useDispatch();  // bắn dữ liệu từ UI đến reducer \r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('All');\r\n  const [filterPriorities, setFilterPriorities] = useState([]);\r\n  \r\n  // dispatch ra action \r\n  const handleSearchTextChange = (e) => {\r\n    setSearchText(e.target.value);\r\n    dispatch(searchFilterChange(e.target.value));\r\n  };\r\n\r\n  const handleStatusChange = (e) => {\r\n    setFilterStatus(e.target.value);\r\n    dispatch(statusFilterChange(e.target.value));\r\n  };\r\n\r\n  const handlePriorityChange = (value) => {\r\n    setFilterPriorities(value);\r\n    dispatch(priorityFilterChange(value));\r\n  }\r\n\r\n  return (\r\n  <Row justify='center'>\r\n    <Col span={24}>\r\n      <Typography.Paragraph\r\n        style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n      >\r\n        Search\r\n      </Typography.Paragraph>\r\n      <Search\r\n        placeholder='input search text'\r\n        value={searchText}\r\n        onChange={handleSearchTextChange}\r\n      />\r\n    </Col>\r\n    <Col sm={24}>\r\n      <Typography.Paragraph\r\n        style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n      >\r\n        Filter By Status\r\n      </Typography.Paragraph>\r\n      <Radio.Group value={filterStatus} onChange={handleStatusChange}>\r\n        <Radio value='All'>All</Radio>\r\n        <Radio value='Completed'>Completed</Radio>\r\n        <Radio value='Todo'>To do</Radio>\r\n      </Radio.Group>\r\n    </Col>\r\n    <Col sm={24}>\r\n      <Typography.Paragraph\r\n        style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n      >\r\n        Filter By Priority\r\n      </Typography.Paragraph>\r\n      {/*1 mảng*/}\r\n      <Select\r\n        mode='multiple'\r\n        allowClear\r\n        placeholder='Please select'\r\n        style={{ width: '100%' }}\r\n        value={filterPriorities}  \r\n        onChange={handlePriorityChange}\r\n      >\r\n        {/*component Select quá đẳng, chọn nhiều được, xóa đi thông qua phím gạch chéo cũng được*/}\r\n        <Select.Option value='High' label='High'>\r\n          <Tag color='red'>High</Tag>\r\n        </Select.Option>\r\n        <Select.Option value='Medium' label='Medium'>\r\n          <Tag color='blue'>Medium</Tag>\r\n        </Select.Option>\r\n        <Select.Option value='Low' label='Low'>\r\n          <Tag color='gray'>Low</Tag>\r\n        </Select.Option>\r\n      </Select>\r\n    </Col>\r\n  </Row>\r\n  );\r\n}\r\n","import { Typography, Divider } from 'antd'; // antd là thư viện dựng UI \r\nimport './App.css';\r\nimport TodoList from './components/TodoList';\r\nimport Filters from './components/Filters';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction App() {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: 500,\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: 'white',\r\n        padding: 20,\r\n        boxShadow: '0 0 10px 4px #bfbfbf',\r\n        borderRadius: 5,\r\n        height: '90vh',\r\n      }}\r\n    >\r\n      <Title style={{ textAlign: 'center' }}>TODO APP with REDUX</Title>\r\n      <Filters />\r\n      <Divider />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"," // chia các state ra thành 2 state \r\nconst initState = {\r\n    search: '',\r\n    status: 'All',\r\n    prioriries: [],\r\n  };\r\n  \r\n  const filtersReducer = (state = initState, action) => {\r\n    \r\n    switch (action.type) {\r\n      case 'filters/searchFilterChange': // thay đổi dữ liệu tìm kiếm \r\n        \r\n      return {\r\n          ...state,\r\n          search: action.payload,\r\n        };\r\n  \r\n      case 'filters/statusFilterChange':\r\n        return {\r\n          ...state,\r\n          status: action.payload\r\n        }\r\n  \r\n      case 'filters/prioritiesFilterChange':\r\n        return {\r\n          ...state,\r\n          prioriries: action.payload\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n    \r\n  };\r\n  \r\n  export default filtersReducer;","const initState = [\r\n    { id: 1, name: 'Learn Yoga', completed: false, prioriry: 'Medium' },\r\n    { id: 2, name: 'Learn Redux', completed: true, prioriry: 'High' },\r\n    { id: 3, name: 'Learn JavaScript', completed: false, prioriry: 'Low' },\r\n  ];\r\n  \r\n  const todoListReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n      case 'todoList/addTodo':\r\n        return [...state, action.payload];\r\n      \r\n      // xử lý action cập nhật trạng thái completed \r\n      case 'todoList/toggleTodoStatus':\r\n        return state.map((todo) =>  // state map ra các đối tượng todo \r\n          todo.id === action.payload  // todo nào bằng action.payload ( dữ liệu id truyền vào)\r\n            ? { ...todo, completed: !todo.completed }  // thì copy lại giá trị của thằng todo đó và chỉnh sửa giá trị trường completed \r\n            : todo // nếu không thì trả lại todo \r\n        );\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default todoListReducer;","import { combineReducers } from 'redux';\r\n\r\nimport filtersReducer from '../components/Filters/FiltersSlice';\r\nimport todoListReducer from '../components/TodoList/TodosSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  filters: filtersReducer,\r\n  todoList: todoListReducer,\r\n});\r\n\r\nexport default rootReducer;","import {createStore} from 'redux'\r\nimport rootReducer from './reducer'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n// ability to work in a long time \r\nconst composedEnhancers = composeWithDevTools(); // để dùng redux devtool để xem thằng state hiện tại \r\nconst store = createStore(rootReducer,composedEnhancers);// enhancer là tham só thữ 2\r\nexport default store; \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './redux/store'\r\nimport {Provider} from 'react-redux'\r\n\r\n// config thằng thằng store cho UI \r\nReactDOM.render(\r\n<Provider store={store}>\r\n    <App />\r\n</Provider>\r\n, document.getElementById('root'));"],"sourceRoot":""}